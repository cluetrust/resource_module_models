---
GENERATOR_VERSION: '1.0'

ANSIBLE_METADATA: |
    {
        'metadata_version': '1.1',
        'status': ['preview'],
        'supported_by': 'network'
    }

NETWORK_OS: vyos
RESOURCE: interfaces
COPYRIGHT: Copyright 2019 Red Hat

DOCUMENTATION: |
  module: vyos_interfaces
  version_added: '2.9.0'
  short_description: Manages interface attributes of VyOS network devices.
  description:
  - This module manages the interface attributes on VyOS network devices.
  - This module supports managing base attributes of Ethernet, Bonding,
    VXLAN, Loopback and Virtual Tunnel Interfaces.
  notes:
  - Tested against VyOS 1.3.8
  - This module works with connection C(ansible.netcommon.network_cli).
    See L(the VyOS OS Platform Options,../network/user_guide/platform_vyos.html).
  author:
  - Nilashish Chakraborty (@nilashishc)
  - Rohit Thakur (@rohitthakur2590)
  options:
    config:
      description: The provided interface configuration.
      type: list
      elements: dict
      suboptions:
        name:
          description:
          - Full name of the interface, e.g. eth0, eth1, bond0, vti1, vxlan2.
          type: str
          required: true
        description:
          description:
          - Interface description.
          type: str
        duplex:
          description:
          - Interface duplex mode.
          - Applicable for Ethernet interfaces only.
          choices:
          - full
          - half
          - auto
          type: str
        enabled:
          default: true
          description:
          - Administrative state of the interface.
          - Set the value to C(true) to administratively enable the interface or C(false) to disable it.
          type: bool
          aliases: ['enable']
        mtu:
          description:
          - MTU for a specific interface. Refer to vendor documentation for valid values.
          - Applicable for Ethernet, Bonding, VXLAN and Virtual Tunnel interfaces.
          type: int
        speed:
          description:
          - Interface link speed.
          - Applicable for Ethernet interfaces only.
          type: str
          choices:
          - auto
          - '10'
          - '100'
          - '1000'
          - '2500'
          - '10000'
        vifs:
          description:
          - Virtual sub-interfaces related configuration.
          - 802.1Q VLAN interfaces are represented as virtual sub-interfaces in VyOS.
          type: list
          elements: dict
          suboptions:
            vlan_id:
              description:
              - Identifier for the virtual sub-interface.
              type: int
            description:
              description:
              - Virtual sub-interface description.
              type: str
            enabled:
              description:
              - Administrative state of the virtual sub-interface.
              - Set the value to C(true) to administratively enable the interface or
                C(false) to disable it.
              type: bool
              default: true
              aliases: ['enable']
            mtu:
              description:
              - MTU for the virtual sub-interface.
              - Refer to vendor documentation for valid values.
              type: int
    running_config:
      description:
      - This option is used only with state I(parsed).
      - The value of this option should be the output received from the VyOS device
        by executing the command B(show configuration commands | grep interfaces).
      - The state I(parsed) reads the configuration from C(running_config) option and
        transforms it into Ansible structured data as per the resource module's argspec
        and the value is then returned in the I(parsed) key within the result.
      type: str
    state:
      description:
      - The state of the configuration after module completion.
      type: str
      choices:
      - merged
      - replaced
      - overridden
      - deleted
      - rendered
      - gathered
      - parsed
      default: merged

RETURN: |
  before:
    description: The configuration prior to the module execution.
    returned: when I(state) is C(merged), C(replaced), C(overridden), C(deleted) or C(purged)
    type: list
    sample: >
      This output will always be in the same format as the
      module argspec.
  after:
    description: The resulting configuration after module execution.
    returned: when changed
    type: list
    sample: >
      This output will always be in the same format as the
      module argspec.
  commands:
    description: The set of commands pushed to the remote device.
    returned: always
    type: list
    sample:
    - 'set interfaces ethernet eth1 mtu 1200'
    - 'set interfaces ethernet eth2 vif 100 description VIF 100'
  rendered:
    description: The provided configuration in the task rendered in device-native format (offline).
    returned: when I(state) is C(rendered)
    type: list
    sample:
    - 'set interfaces ethernet eth1 mtu 1200'
    - 'set interfaces ethernet eth2 vif 100 description VIF 100'
  gathered:
    description: Facts about the network resource gathered from the remote device as structured data.
    returned: when I(state) is C(gathered)
    type: list
    sample: >
      This output will always be in the same format as the
      module argspec.
  parsed:
    description: The device native config provided in I(running_config) option parsed into structured data as per module argspec.
    returned: when I(state) is C(parsed)
    type: list
    sample: >
      This output will always be in the same format as the
      module argspec.

EXAMPLES:
  - merged_example_01.txt
  - replaced_example_01.txt
  - overridden_example_01.txt
  - deleted_example_01.txt
  - gathered_example_01.txt
  - rendered_example_01.txt
  - parsed_example_01.txt
